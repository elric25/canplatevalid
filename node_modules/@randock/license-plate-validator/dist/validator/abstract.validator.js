"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.AbstractValidator = void 0;
class AbstractValidator {
    constructor(patterns) {
        this.patterns = patterns;
    }
    static normalizeLicensePlateNumber(pattern, licensePlateNumber) {
        if (pattern.normalizer !== undefined) {
            return pattern.normalizer(licensePlateNumber);
        }
        return licensePlateNumber.toUpperCase().replace(/Â·|-|_|\.|:|,|;|\s/g, '');
    }
    format(licensePlateNumber) {
        if (!this.validate(licensePlateNumber)) {
            throw new Error('License plate cannot be formatted because it is invalid.');
        }
        const formats = [];
        this.patterns.forEach((pattern) => {
            const normalizedLicensePlateNumber = AbstractValidator.normalizeLicensePlateNumber(pattern, licensePlateNumber);
            const matches = normalizedLicensePlateNumber.match(pattern.regexp);
            if (matches !== null) {
                formats.push(pattern.formatter(matches));
            }
        });
        return formats;
    }
    validate(licensePlateNumber) {
        let valid = false;
        this.patterns.forEach((pattern) => {
            const normalizedLicensePlateNumber = AbstractValidator.normalizeLicensePlateNumber(pattern, licensePlateNumber);
            const matches = normalizedLicensePlateNumber.match(pattern.regexp);
            valid = valid || matches !== null;
        });
        return valid;
    }
}
exports.AbstractValidator = AbstractValidator;
//# sourceMappingURL=abstract.validator.js.map