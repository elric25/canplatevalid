import { ValidatorInterface } from './validator.interface';
import { Validator as ONValidator } from './ON/validator';
import { Validator as QCValidator } from './QC/validator';
import { Validator as NBValidator } from './NB/validator';
import { Validator as NLValidator } from './NL/validator';
import { Validator as PEValidator } from './PE/validator';
import { Validator as NSValidator } from './NS/validator';
import { Validator as MBValidator } from './MB/validator';
import { Validator as SKValidator } from './SK/validator';
import { Validator as ABValidator } from './AB/validator';
import { Validator as BCValidator } from './BC/validator';
import { Validator as NTValidator } from './NT/validator';
import { Validator as NUValidator } from './NU/validator';
import { Validator as YTValidator } from './YT/validator';

export class ValidatorFactory {
  static forprovince(province: string): ValidatorInterface {
    switch (province) {
      case 'ON':
        return new ONValidator();
      case 'QC':
        return new QCValidator();
      case 'NB':
        return new NBValidator();
      case 'NL':
        return new NLValidator();
      case 'PE':
        return new PEValidator();
      case 'NS':
        return new NSValidator();
      case 'MB':
        return new MBValidator();
      case 'SK':
        return new SKValidator();
      case 'AB':
        return new ABValidator();
      case 'BC':
        return new BCValidator();
      case 'NT':
        return new NTValidator();
      case 'NU':
        return new NUValidator();
      case 'YT':
        return new YTValidator();
      default:
        throw new Error(`No validator defined for this province: ${province}.`);
    }
  }
}