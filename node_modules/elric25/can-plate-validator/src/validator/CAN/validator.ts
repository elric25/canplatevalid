import { ValidatorInterface } from 'elric25/can-plate-validator/src/validator/validator.interface';
import { AbstractValidator } from 'elric25/can-plate-validator/src/validator/abstract.validator';
import { Pattern } from 'elric25/can-plate-validator/src/validator/pattern';

const ONPatterns: Pattern[] = [
  {
    regexp: /^[a-zA-Z]{4}\d{3}$/,
    formatter(matches): string {
      return matches[0];
    },
  }
];
const QCPatterns: Pattern[] = [
  {
    regexp: /^[a-zA-Z]{3}\d{3}$/,
    formatter(matches): string {
      return matches[0];
    },
  }
];
const NBPatterns: Pattern[] = [
  {
    regexp: /^\d{3}[a-zA-Z]{3}$/,
    formatter(matches): string {
      return matches[0];
    },
  }
];
export class ONValidator extends AbstractValidator implements ValidatorInterface {
  constructor() {
    super(ONPatterns);
  }
}
export class QCValidator extends AbstractValidator implements ValidatorInterface {
  constructor() {
    super(QCPatterns);
  }
}
export class NBValidator extends AbstractValidator implements ValidatorInterface {
  constructor() {
    super(NBPatterns);
  }
}
export class NLValidator extends AbstractValidator implements ValidatorInterface {
  constructor() {
    super([
      {
        regexp: /^[a-zA-Z]\d{2}[a-zA-Z]\d{3}$/,
        formatter(matches): string {
          return matches[0];
        },
      }
    ]);
  }
}
