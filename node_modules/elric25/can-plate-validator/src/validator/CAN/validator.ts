import { ValidatorInterface } from 'elric25/can-plate-validator/src/validator/validator.interface';
import { AbstractValidator } from 'elric25/can-plate-validator/src/validator/abstract.validator';
import { Pattern } from 'elric25/can-plate-validator/src/validator/pattern';

export const ONPatterns: Pattern[] = [
  {
    regexp: /^[a-zA-Z]{4}\d{3}$/,
    formatter(matches): string {
      return matches[0];
    },
  },
];
export const QCPatterns: Pattern[] = [
  {
    regexp: /^[a-zA-Z]{3}\d{3}$/,
    formatter(matches): string {
      return matches[0];
    },
  },
];
export const NBPatterns: Pattern[] = [
  {
    regexp: /^\d{3}[a-zA-Z]{3}$/,
    formatter(matches): string {
      return matches[0];
    },
  },
];
export const NLPatterns: Pattern[] = [
  {
    regexp: /^[a-zA-Z]\d{2}[a-zA-Z]\d{3}$/,
    formatter(matches): string {
      return matches[0];
    },
  },
];
export const AB_NTPatterns: Pattern[] = [
  {
    regexp: /^[a-zA-Z]{3}\d{4}$/,
    formatter(matches): string {
      return matches[0];
    },
  },
];
export const BCPatterns: Pattern[] = [
  {
    regexp: /^\d{4}[a-zA-Z]{3}$/,
    formatter(matches): string {
      return matches[0];
    },
  },
];
export const NUPatterns: Pattern[] = [
  {
    regexp: /^\d{3} \d{3}$/,
    formatter(matches): string {
      return matches[0];
    },
  },
];
export const MB_NS_PE_SKPatterns: Pattern[] = [
  {
    regexp: /^[a-zA-Z]{3}\d{3}$/,
    formatter(matches): string {
      return matches[0];
    },
  },
];
export const YKPatterns: Pattern[] = [
  {
    regexp: /^[a-zA-Z]{3}\d{2}$/,
    formatter(matches): string {
      return matches[0];
    },
  },
];

export class ONValidator extends AbstractValidator implements ValidatorInterface {
  constructor() {
    super(ONPatterns);
  }
}
export class QCValidator extends AbstractValidator implements ValidatorInterface {
  constructor() {
    super(QCPatterns);
  }
}
export class NBValidator extends AbstractValidator implements ValidatorInterface {
  constructor() {
    super(NBPatterns);
  }
}
export class NLValidator extends AbstractValidator implements ValidatorInterface {
  constructor() {
    super(NLPatterns);
  }
}
export class ABValidator extends AbstractValidator implements ValidatorInterface {
  constructor() {
    super(AB_NTPatterns);
  }
}
export class PEValidator extends AbstractValidator implements ValidatorInterface {
  constructor() {
    super(MB_NS_PE_SKPatterns);
  }
}
export class BCValidator extends AbstractValidator implements ValidatorInterface {
  constructor() {
    super(BCPatterns);
  }
}
export class NSValidator extends AbstractValidator implements ValidatorInterface {
  constructor() {
    super(MB_NS_PE_SKPatterns);
  }
}
export class MBValidator extends AbstractValidator implements ValidatorInterface {
  constructor() {
    super(MB_NS_PE_SKPatterns);
  }
}
export class SKValidator extends AbstractValidator implements ValidatorInterface {
  constructor() {
    super(MB_NS_PE_SKPatterns);
  }
}
export class NUValidator extends AbstractValidator implements ValidatorInterface {
  constructor() {
    super(NUPatterns);
  }
}
export class NTValidator extends AbstractValidator implements ValidatorInterface {
  constructor() {
    super(AB_NTPatterns);
  }
}
export class YTValidator extends AbstractValidator implements ValidatorInterface {
  constructor() {
    super(YKPatterns);
  }
}
